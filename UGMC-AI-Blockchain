System Architecture

1. Blockchain Layer (Ethereum/Hyperledger) - Data integrity & access control
2. AI Layer (Python/TensorFlow) - Diagnostics, predictions, anomaly detection
3. IPFS Storage - Decentralized medical data storage
4. Frontend (React) - User interfaces for clinicians/patients
5. API Gateway - Integration with existing EHR systems

// 1. Smart Contract for Healthcare Data Integrity (Solidity) //

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HealthcareDataLedger {
    struct MedicalRecord {
        string patientId;
        string dataHash;
        string aiDiagnosis;
        uint256 timestamp;
        address createdBy;
        bool verified;
    }
    
    struct AccessLog {
        address accessedBy;
        uint256 timestamp;
        string purpose;
    }
    
    mapping(string => MedicalRecord[]) private patientRecords;
    mapping(string => AccessLog[]) private accessLogs;
    mapping(string => mapping(address => bool)) private accessPermissions;
    
    address public admin;
    address public aiValidator;
    
    event RecordAdded(string indexed patientId, string dataHash);
    event RecordVerified(string indexed patientId, uint256 recordIndex);
    event AccessGranted(string indexed patientId, address practitioner);
    event AccessRevoked(string indexed patientId, address practitioner);
    event DataAccessed(string indexed patientId, address accessedBy);
    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }
    
    modifier onlyAIValidator() {
        require(msg.sender == aiValidator, "Only AI validator can perform this action");
        _;
    }
    
    constructor(address _aiValidator) {
        admin = msg.sender;
        aiValidator = _aiValidator;
    }
    
    function addRecord(
        string memory patientId, 
        string memory dataHash,
        string memory aiDiagnosis
    ) public {
        require(accessPermissions[patientId][msg.sender], "No access permissions");
        
        patientRecords[patientId].push(MedicalRecord(
            patientId,
            dataHash,
            aiDiagnosis,
            block.timestamp,
            msg.sender,
            false // Initially unverified
        ));
        
        emit RecordAdded(patientId, dataHash);
    }
    
    function verifyRecord(string memory patientId, uint256 recordIndex) public onlyAIValidator {
        require(recordIndex < patientRecords[patientId].length, "Invalid record index");
        patientRecords[patientId][recordIndex].verified = true;
        emit RecordVerified(patientId, recordIndex);
    }
    
    function grantAccess(string memory patientId, address practitioner) public onlyAdmin {
        accessPermissions[patientId][practitioner] = true;
        emit AccessGranted(patientId, practitioner);
    }
    
    function revokeAccess(string memory patientId, address practitioner) public onlyAdmin {
        accessPermissions[patientId][practitioner] = false;
        emit AccessRevoked(patientId, practitioner);
    }
    
    function getRecords(string memory patientId) public returns (MedicalRecord[] memory) {
        require(accessPermissions[patientId][msg.sender], "Access denied");
        
        accessLogs[patientId].push(AccessLog(
            msg.sender,
            block.timestamp,
            "Clinical review"
        ));
        
        emit DataAccessed(patientId, msg.sender);
        return patientRecords[patientId];
    }
    
    function getAccessLogs(string memory patientId) public view onlyAdmin returns (AccessLog[] memory) {
        return accessLogs[patientId];
    }
}

// 2. AI Diagnostic Module (Python) //

import tensorflow as tf
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np
import hashlib
import json
from web3 import Web3

class HealthcareAI:
    def __init__(self, model_path=None):
        # Initialize with pre-trained models
        self.diagnosis_model = tf.keras.models.load_model(model_path) if model_path else self._build_default_model()
        self.anomaly_detector = RandomForestClassifier()
        self.web3 = Web3(Web3.HTTPProvider('http://localhost:8545'))
        self.contract_address = '0x...'
        self.contract_abi = [...]  # ABI from compiled contract
        
    def _build_default_model(self):
        # Simplified diagnostic model architecture
        model = tf.keras.Sequential([
            tf.keras.layers.Dense(64, activation='relu', input_shape=(10,)),
            tf.keras.layers.Dense(32, activation='relu'),
            tf.keras.layers.Dense(1, activation='sigmoid')
        ])
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
        return model
    
    def analyze_medical_data(self, patient_data):
        # Preprocess data
        processed_data = self._preprocess_data(patient_data)
        
        # Generate diagnosis
        diagnosis_prob = self.diagnosis_model.predict(processed_data)
        diagnosis = "High risk" if diagnosis_prob > 0.7 else "Low risk"
        
        # Check for anomalies
        anomaly = self._detect_anomalies(processed_data)
        
        return {
            "diagnosis": diagnosis,
            "confidence": float(diagnosis_prob[0][0]),
            "anomaly_detected": anomaly,
            "data_hash": self._generate_data_hash(patient_data)
        }
    
    def _preprocess_data(self, raw_data):
        # Convert to numpy array and normalize
        return np.array([[
            raw_data['age']/100,
            raw_data['bp']/200,
            raw_data['cholesterol']/300,
            # ... other features
        ]])
    
    def _detect_anomalies(self, data):
        # Simplified anomaly detection
        return np.any(data > 1.5)  # Threshold for anomaly
    
    def _generate_data_hash(self, data):
        return hashlib.sha256(json.dumps(data).encode()).hexdigest()
    
    def submit_to_blockchain(self, patient_id, analysis_result):
        # Connect to blockchain
        contract = self.web3.eth.contract(address=self.contract_address, abi=self.contract_abi)
        
        # Submit record
        tx_hash = contract.functions.addRecord(
            patient_id,
            analysis_result['data_hash'],
            analysis_result['diagnosis']
        ).transact({'from': self.web3.eth.accounts[0]})
        
        return tx_hash

// 3. Integration Server (Node.js) //

const express = require('express');
const Web3 = require('web3');
const { create } = require('ipfs-http-client');
const tf = require('@tensorflow/tfjs-node');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Initialize components
const ipfs = create({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });
const web3 = new Web3('http://localhost:8545');
const contractABI = require('./HealthcareDataLedger.json').abi;
const contractAddress = '0x...';
const healthcareContract = new web3.eth.Contract(contractABI, contractAddress);

// Load AI model
let aiModel;
(async () => {
    aiModel = await tf.loadLayersModel('file://path/to/model.json');
})();

// API Endpoints
app.post('/api/records', async (req, res) => {
    try {
        // 1. Store medical data in IPFS
        const { patientId, medicalData } = req.body;
        const ipfsHash = await storeInIPFS(medicalData);
        
        // 2. Process with AI
        const aiAnalysis = await analyzeWithAI(medicalData);
        
        // 3. Record on blockchain
        const txReceipt = await healthcareContract.methods.addRecord(
            patientId,
            ipfsHash,
            aiAnalysis.diagnosis
        ).send({ from: web3.eth.accounts[0] });
        
        res.json({
            ipfsHash,
            aiAnalysis,
            txHash: txReceipt.transactionHash
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.get('/api/records/:patientId', async (req, res) => {
    try {
        const records = await healthcareContract.methods.getRecords(
            req.params.patientId
        ).call({ from: web3.eth.accounts[0] });
        
        res.json(records);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Helper functions
async function storeInIPFS(data) {
    const { cid } = await ipfs.add(JSON.stringify(data));
    return cid.toString();
}

async function analyzeWithAI(data) {
    // Convert data to tensor
    const inputTensor = tf.tensor2d([
        [data.age/100, data.bp/200, data.cholesterol/300 /* ... */]
    ]);
    
    // Get prediction
    const prediction = aiModel.predict(inputTensor);
    const diagnosis = prediction.dataSync()[0] > 0.7 ? 'High risk' : 'Low risk';
    
    return {
        diagnosis,
        confidence: prediction.dataSync()[0],
        dataHash: createHash(data)
    };
}

function createHash(data) {
    return require('crypto').createHash('sha256')
        .update(JSON.stringify(data)).digest('hex');
}

app.listen(3000, () => console.log('Server running on port 3000'));

// 4. Frontend Component for Patient Access (React) //

import React, { useState, useEffect } from 'react';
import Web3 from 'web3';
import { create } from 'ipfs-http-client';

const ipfs = create({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });

function PatientPortal() {
    const [web3, setWeb3] = useState(null);
    const [account, setAccount] = useState('');
    const [records, setRecords] = useState([]);
    const [accessLogs, setAccessLogs] = useState([]);
    const [grantAccessTo, setGrantAccessTo] = useState('');
    
    useEffect(() => {
        initWeb3();
    }, []);
    
    const initWeb3 = async () => {
        if (window.ethereum) {
            try {
                const web3Instance = new Web3(window.ethereum);
                await window.ethereum.enable();
                setWeb3(web3Instance);
                
                const accounts = await web3Instance.eth.getAccounts();
                setAccount(accounts[0]);
            } catch (error) {
                console.error("Error initializing Web3:", error);
            }
        }
    };
    
    const fetchRecords = async () => {
        const contract = getContract();
        const patientId = await getPatientId();
        
        const records = await contract.methods.getRecords(patientId)
            .call({ from: account });
        
        // Fetch actual data from IPFS
        const fullRecords = await Promise.all(records.map(async record => {
            const data = await retrieveFromIPFS(record.dataHash);
            return { ...record, fullData: data };
        }));
        
        setRecords(fullRecords);
    };
    
    const retrieveFromIPFS = async (hash) => {
        const stream = ipfs.cat(hash);
        let data = '';
        
        for await (const chunk of stream) {
            data += chunk.toString();
        }
        
        return JSON.parse(data);
    };
    
    const grantAccess = async () => {
        const contract = getContract();
        await contract.methods.grantAccess(
            await getPatientId(),
            grantAccessTo
        ).send({ from: account });
        
        alert(`Access granted to ${grantAccessTo}`);
    };
    
    const revokeAccess = async (address) => {
        const contract = getContract();
        await contract.methods.revokeAccess(
            await getPatientId(),
            address
        ).send({ from: account });
        
        alert(`Access revoked for ${address}`);
    };
    
    const getContract = () => {
        const contractABI = [...]; // Your contract ABI
        const contractAddress = '0x...'; // Your contract address
        return new web3.eth.Contract(contractABI, contractAddress);
    };
    
    const getPatientId = async () => {
        // In a real app, this would come from user profile or authentication
        return 'patient-' + account.substring(2, 10);
    };
    
    return (
        <div className="patient-portal">
            <h1>My Health Records</h1>
            
            <button onClick={fetchRecords}>Refresh Records</button>
            
            <div className="access-control">
                <h2>Manage Access</h2>
                <input 
                    type="text" 
                    placeholder="Practitioner address" 
                    value={grantAccessTo}
                    onChange={(e) => setGrantAccessTo(e.target.value)}
                />
                <button onClick={grantAccess}>Grant Access</button>
            </div>
            
            <div className="records">
                <h2>Medical Records</h2>
                {records.map((record, index) => (
                    <div key={index} className="record">
                        <h3>Record {index + 1}</h3>
                        <p>Date: {new Date(record.timestamp * 1000).toLocaleString()}</p>
                        <p>AI Diagnosis: {record.aiDiagnosis}</p>
                        <p>Verified: {record.verified ? 'Yes' : 'No'}</p>
                        <pre>{JSON.stringify(record.fullData, null, 2)}</pre>
                    </div>
                ))}
            </div>
            
            <div className="access-logs">
                <h2>Access History</h2>
                <button onClick={fetchAccessLogs}>View Access Logs</button>
                {accessLogs.map((log, index) => (
                    <div key={index} className="log">
                        <p>Accessed by: {log.accessedBy}</p>
                        <p>On: {new Date(log.timestamp * 1000).toLocaleString()}</p>
                        <p>Purpose: {log.purpose}</p>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default PatientPortal;

// Key Features Implemented
Blockchain-Based Data Integrity:

Immutable record-keeping with Ethereum smart contracts

Complete audit trail of all data accesses

Patient-controlled access via smart contracts

AI-Powered Clinical Intelligence:

Diagnostic predictions and risk assessments

Anomaly detection in medical data

Integration with blockchain for verifiable AI outputs

Decentralized Storage:

IPFS for secure, distributed medical data storage

Content-addressable data references on blockchain

Patient Empowerment:

Transparent control over data access

Visibility into all system interactions with their data

Consent management through smart contracts

Regulatory Compliance:

Audit trails for HIPAA/GDPR compliance

Data integrity verification mechanisms

Role-based access control

//
